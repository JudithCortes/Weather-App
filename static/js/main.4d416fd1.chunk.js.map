{"version":3,"sources":["components/weather.js","App.js","reportWebVitals.js","index.js"],"names":["refresh","window","location","reload","CardExampleCard","weatherData","className","name","moment","format","weather","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","Button","inverted","color","circular","icon","onClick","App","useState","lat","setLat","lat2","long","setLong","long2","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","process","then","res","json","result","console","log","fetchData","Dimmer","active","Loader","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAOMA,EAAU,WACdC,OAAOC,SAASC,UA6BHC,EAzBS,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OACrB,sBAAKC,UAAU,OAAf,UACG,mBAAGA,UAAU,SAAb,SAAuBD,EAAYE,OACnC,sBAAKD,UAAU,OAAf,UACE,oBAAGA,UAAU,MAAb,UAAoBE,MAASC,OAAO,QAApC,KAA8C,+BAAOD,MAASC,OAAO,WACrE,mBAAGH,UAAU,cAAb,SAA4BD,EAAYK,QAAQ,GAAGC,UAGrD,sBAAKL,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBAAiCD,EAAYM,KAAKC,KAAlD,YACA,oBAAGN,UAAU,OAAb,uBAA+BD,EAAYM,KAAKE,SAAhD,WAGF,sBAAKP,UAAU,OAAf,UACE,oBAAGA,UAAU,iBAAb,sBAAwC,IAAIQ,KAA+B,IAA1BT,EAAYU,IAAIC,SAAgBC,mBAAmB,YACpG,oBAAGX,UAAU,iBAAb,qBAAuC,IAAIQ,KAA8B,IAAzBT,EAAYU,IAAIG,QAAeD,mBAAmB,eAGnG,sBAAKX,UAAU,MAAf,UACC,mBAAGA,UAAU,SAAb,SAAuBD,EAAYE,OACnC,cAACY,EAAA,EAAD,CAAQb,UAAU,SAASc,UAAQ,EAACC,MAAM,OAAOC,UAAQ,EAACC,KAAK,UAAUC,QAASxB,W,kBCzB3E,SAASyB,IAEtB,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAEA,GAFA,KAEwBH,mBAAS,KAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAA0BL,mBAAS,IAAnC,mBAAOM,EAAP,KAEA,GAFA,KAEwBN,mBAAS,KAAjC,mBAAOO,EAAP,KAAaC,EAAb,KA2BA,OAxBAC,qBAAU,YAEO,uCAAG,sBAAAC,EAAA,6DAGhBC,UAAUC,YAAYC,oBAAmB,SAASC,GAClDZ,EAAOY,EAASC,OAAOC,UACvBX,EAAQS,EAASC,OAAOE,cALR,SASVC,MAAM,GAAD,OAAIC,0CAAJ,yBAAkDlB,EAAlD,gBAA6DG,EAA7D,+BAAwFe,qCAClGC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJf,EAAQe,GACRC,QAAQC,IAAIF,MAbE,2CAAH,qDAiBfG,KAEC,CAACvB,EAAMG,IAIR,qBAAK1B,UAAU,MAAf,SAC0B,oBAAb2B,EAAKtB,KACd,cAAC,EAAD,CAASN,YAAa4B,IAEtB,8BACG,cAACoB,EAAA,EAAD,CAAQC,QAAM,EAAd,SACC,cAACC,EAAA,EAAD,8BCjDZ,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4d416fd1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styles.css';\r\n\r\nimport moment from 'moment';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n\r\nconst refresh = () => {\r\n  window.location.reload();\r\n}\r\n\r\n\r\nconst CardExampleCard = ({weatherData}) => (\r\n   <div className=\"main\">\r\n      <p className=\"header\">{weatherData.name}</p>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\r\n        <p className=\"description\">{weatherData.weather[0].main}</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">Sunrise: {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n        <p className=\"sunrise-sunset\">Sunset: {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n      </div>\r\n      \r\n       <div className=\"top\">\r\n        <p className=\"header\">{weatherData.name}</p>\r\n        <Button className=\"button\" inverted color='blue' circular icon='refresh' onClick={refresh} />\r\n      </div>\r\n  </div>\r\n)\r\n\r\nexport default CardExampleCard;","\nimport './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport Weather from './components/weather';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\n\nexport default function App() {\n\n  const [lat, setLat] = useState([]);\n  const [lat2, setLat2] = useState([]);\n\n  const [long, setLong] = useState([]);\n  const [long2, setLong2] = useState([]);\n\n  const [data, setData] = useState([]);\n\n\n  useEffect(() => {\n\n    const fetchData = async () => {\n\n\n      navigator.geolocation.getCurrentPosition(function(position) {\n      setLat(position.coords.latitude);\n      setLong(position.coords.longitude);\n      });\n\n\n      await fetch(`${process.env.REACT_APP_API_URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${process.env.REACT_APP_API_KEY}`)\n      .then(res => res.json())\n      .then(result => {\n        setData(result)\n        console.log(result);\n      });\n    }\n    \n    fetchData();\n\n  }, [lat2, long2]);\n\n\n  return (\n    <div className=\"App\">\n        {(typeof data.main != 'undefined') ? (\n        <Weather weatherData={data}/>\n      ): (\n        <div>\n           <Dimmer active>\n            <Loader>Loading..</Loader>\n          </Dimmer>\n        </div>\n      )}\n    </div>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}